// Mocks generated by Mockito 5.4.4 from annotations
// in cente_pice/test/unit/features/auth/data/repositories/particulier_auth_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:cente_pice/src/features/auth/data/datasources/particulier_auth_local_datasource.dart'
    as _i5;
import 'package:cente_pice/src/features/auth/data/datasources/particulier_auth_remote_datasource.dart'
    as _i3;
import 'package:cente_pice/src/features/auth/data/models/particulier_model.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeParticulierModel_0 extends _i1.SmartFake
    implements _i2.ParticulierModel {
  _FakeParticulierModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ParticulierAuthRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockParticulierAuthRemoteDataSource extends _i1.Mock
    implements _i3.ParticulierAuthRemoteDataSource {
  MockParticulierAuthRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ParticulierModel> signInAnonymously() => (super.noSuchMethod(
        Invocation.method(
          #signInAnonymously,
          [],
        ),
        returnValue:
            _i4.Future<_i2.ParticulierModel>.value(_FakeParticulierModel_0(
          this,
          Invocation.method(
            #signInAnonymously,
            [],
          ),
        )),
      ) as _i4.Future<_i2.ParticulierModel>);

  @override
  _i4.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.ParticulierModel> getCurrentParticulier() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentParticulier,
          [],
        ),
        returnValue:
            _i4.Future<_i2.ParticulierModel>.value(_FakeParticulierModel_0(
          this,
          Invocation.method(
            #getCurrentParticulier,
            [],
          ),
        )),
      ) as _i4.Future<_i2.ParticulierModel>);

  @override
  _i4.Future<bool> isLoggedIn() => (super.noSuchMethod(
        Invocation.method(
          #isLoggedIn,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<_i2.ParticulierModel> updateParticulier(
          _i2.ParticulierModel? particulier) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateParticulier,
          [particulier],
        ),
        returnValue:
            _i4.Future<_i2.ParticulierModel>.value(_FakeParticulierModel_0(
          this,
          Invocation.method(
            #updateParticulier,
            [particulier],
          ),
        )),
      ) as _i4.Future<_i2.ParticulierModel>);
}

/// A class which mocks [ParticulierAuthLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockParticulierAuthLocalDataSource extends _i1.Mock
    implements _i5.ParticulierAuthLocalDataSource {
  MockParticulierAuthLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ParticulierModel?> getCachedParticulier() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedParticulier,
          [],
        ),
        returnValue: _i4.Future<_i2.ParticulierModel?>.value(),
      ) as _i4.Future<_i2.ParticulierModel?>);

  @override
  _i4.Future<void> cacheParticulier(_i2.ParticulierModel? particulier) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheParticulier,
          [particulier],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> clearCache() => (super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
