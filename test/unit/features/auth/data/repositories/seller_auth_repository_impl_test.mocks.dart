// Mocks generated by Mockito 5.4.6 from annotations
// in cente_pice/test/unit/features/auth/data/repositories/seller_auth_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:cente_pice/src/core/network/network_info.dart' as _i7;
import 'package:cente_pice/src/features/auth/data/datasources/particulier_auth_local_datasource.dart'
    as _i5;
import 'package:cente_pice/src/features/auth/data/datasources/seller_auth_remote_datasource.dart'
    as _i3;
import 'package:cente_pice/src/features/auth/data/models/particulier_model.dart'
    as _i6;
import 'package:cente_pice/src/features/auth/data/models/seller_model.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSellerModel_0 extends _i1.SmartFake implements _i2.SellerModel {
  _FakeSellerModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SellerAuthRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockSellerAuthRemoteDataSource extends _i1.Mock
    implements _i3.SellerAuthRemoteDataSource {
  MockSellerAuthRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.SellerModel> registerSeller({
    required String? email,
    required String? password,
    String? firstName,
    String? lastName,
    String? companyName,
    String? phone,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerSeller,
          [],
          {
            #email: email,
            #password: password,
            #firstName: firstName,
            #lastName: lastName,
            #companyName: companyName,
            #phone: phone,
          },
        ),
        returnValue: _i4.Future<_i2.SellerModel>.value(_FakeSellerModel_0(
          this,
          Invocation.method(
            #registerSeller,
            [],
            {
              #email: email,
              #password: password,
              #firstName: firstName,
              #lastName: lastName,
              #companyName: companyName,
              #phone: phone,
            },
          ),
        )),
      ) as _i4.Future<_i2.SellerModel>);

  @override
  _i4.Future<_i2.SellerModel> loginSeller({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginSeller,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i4.Future<_i2.SellerModel>.value(_FakeSellerModel_0(
          this,
          Invocation.method(
            #loginSeller,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i4.Future<_i2.SellerModel>);

  @override
  _i4.Future<void> logoutSeller() => (super.noSuchMethod(
        Invocation.method(
          #logoutSeller,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> sendPasswordResetEmail(String? email) => (super.noSuchMethod(
        Invocation.method(
          #sendPasswordResetEmail,
          [email],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updatePassword({
    required String? currentPassword,
    required String? newPassword,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePassword,
          [],
          {
            #currentPassword: currentPassword,
            #newPassword: newPassword,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.SellerModel> getCurrentSeller() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentSeller,
          [],
        ),
        returnValue: _i4.Future<_i2.SellerModel>.value(_FakeSellerModel_0(
          this,
          Invocation.method(
            #getCurrentSeller,
            [],
          ),
        )),
      ) as _i4.Future<_i2.SellerModel>);

  @override
  _i4.Future<_i2.SellerModel> updateSellerProfile(_i2.SellerModel? seller) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSellerProfile,
          [seller],
        ),
        returnValue: _i4.Future<_i2.SellerModel>.value(_FakeSellerModel_0(
          this,
          Invocation.method(
            #updateSellerProfile,
            [seller],
          ),
        )),
      ) as _i4.Future<_i2.SellerModel>);

  @override
  _i4.Future<void> sendEmailVerification() => (super.noSuchMethod(
        Invocation.method(
          #sendEmailVerification,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> verifyEmail(String? token) => (super.noSuchMethod(
        Invocation.method(
          #verifyEmail,
          [token],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [ParticulierAuthLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockParticulierAuthLocalDataSource extends _i1.Mock
    implements _i5.ParticulierAuthLocalDataSource {
  MockParticulierAuthLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i6.ParticulierModel?> getCachedParticulier() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedParticulier,
          [],
        ),
        returnValue: _i4.Future<_i6.ParticulierModel?>.value(),
      ) as _i4.Future<_i6.ParticulierModel?>);

  @override
  _i4.Future<void> cacheParticulier(_i6.ParticulierModel? particulier) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheParticulier,
          [particulier],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> clearCache() => (super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i7.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
