// Mocks generated by Mockito 5.4.4 from annotations
// in cente_pice/test/unit/features/auth/domain/usecases/get_current_particulier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:cente_pice/src/core/errors/failures.dart' as _i5;
import 'package:cente_pice/src/features/auth/domain/entities/particulier.dart'
    as _i6;
import 'package:cente_pice/src/features/auth/domain/repositories/particulier_auth_repository.dart'
    as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ParticulierAuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockParticulierAuthRepository extends _i1.Mock
    implements _i3.ParticulierAuthRepository {
  MockParticulierAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Particulier>> signInAnonymously() =>
      (super.noSuchMethod(
        Invocation.method(
          #signInAnonymously,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Particulier>>.value(
            _FakeEither_0<_i5.Failure, _i6.Particulier>(
          this,
          Invocation.method(
            #signInAnonymously,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Particulier>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #logout,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Particulier>>
      getCurrentParticulier() => (super.noSuchMethod(
            Invocation.method(
              #getCurrentParticulier,
              [],
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i6.Particulier>>.value(
                    _FakeEither_0<_i5.Failure, _i6.Particulier>(
              this,
              Invocation.method(
                #getCurrentParticulier,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Particulier>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> isLoggedIn() => (super.noSuchMethod(
        Invocation.method(
          #isLoggedIn,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #isLoggedIn,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Particulier>> updateParticulier(
          _i6.Particulier? particulier) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateParticulier,
          [particulier],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Particulier>>.value(
            _FakeEither_0<_i5.Failure, _i6.Particulier>(
          this,
          Invocation.method(
            #updateParticulier,
            [particulier],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Particulier>>);
}
