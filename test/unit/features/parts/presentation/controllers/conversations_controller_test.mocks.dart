// Mocks generated by Mockito 5.4.4 from annotations
// in cente_pice/test/unit/features/parts/presentation/controllers/conversations_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:cente_pice/src/core/errors/failures.dart' as _i8;
import 'package:cente_pice/src/core/services/realtime_service.dart' as _i14;
import 'package:cente_pice/src/features/parts/data/datasources/conversations_remote_datasource.dart'
    as _i12;
import 'package:cente_pice/src/features/parts/domain/entities/conversation.dart'
    as _i5;
import 'package:cente_pice/src/features/parts/domain/entities/conversation_enums.dart'
    as _i13;
import 'package:cente_pice/src/features/parts/domain/entities/message.dart'
    as _i4;
import 'package:cente_pice/src/features/parts/domain/repositories/conversations_repository.dart'
    as _i2;
import 'package:cente_pice/src/features/parts/domain/usecases/get_conversation_messages.dart'
    as _i9;
import 'package:cente_pice/src/features/parts/domain/usecases/get_conversations.dart'
    as _i6;
import 'package:cente_pice/src/features/parts/domain/usecases/manage_conversation.dart'
    as _i11;
import 'package:cente_pice/src/features/parts/domain/usecases/send_message.dart'
    as _i10;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeConversationsRepository_0 extends _i1.SmartFake
    implements _i2.ConversationsRepository {
  _FakeConversationsRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMessage_2 extends _i1.SmartFake implements _i4.Message {
  _FakeMessage_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConversation_3 extends _i1.SmartFake implements _i5.Conversation {
  _FakeConversation_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetConversations].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetConversations extends _i1.Mock implements _i6.GetConversations {
  MockGetConversations() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ConversationsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeConversationsRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ConversationsRepository);

  @override
  _i7.Future<_i3.Either<_i8.Failure, List<_i5.Conversation>>> call(
          _i6.GetConversationsParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i7.Future<_i3.Either<_i8.Failure, List<_i5.Conversation>>>.value(
                _FakeEither_1<_i8.Failure, List<_i5.Conversation>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, List<_i5.Conversation>>>);
}

/// A class which mocks [GetConversationMessages].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetConversationMessages extends _i1.Mock
    implements _i9.GetConversationMessages {
  MockGetConversationMessages() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ConversationsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeConversationsRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ConversationsRepository);

  @override
  _i7.Future<_i3.Either<_i8.Failure, List<_i4.Message>>> call(
          _i9.GetConversationMessagesParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i7.Future<_i3.Either<_i8.Failure, List<_i4.Message>>>.value(
                _FakeEither_1<_i8.Failure, List<_i4.Message>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, List<_i4.Message>>>);
}

/// A class which mocks [SendMessage].
///
/// See the documentation for Mockito's code generation for more information.
class MockSendMessage extends _i1.Mock implements _i10.SendMessage {
  MockSendMessage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ConversationsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeConversationsRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ConversationsRepository);

  @override
  _i7.Future<_i3.Either<_i8.Failure, _i4.Message>> call(
          _i10.SendMessageParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i7.Future<_i3.Either<_i8.Failure, _i4.Message>>.value(
            _FakeEither_1<_i8.Failure, _i4.Message>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, _i4.Message>>);
}

/// A class which mocks [MarkMessagesAsRead].
///
/// See the documentation for Mockito's code generation for more information.
class MockMarkMessagesAsRead extends _i1.Mock
    implements _i11.MarkMessagesAsRead {
  MockMarkMessagesAsRead() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ConversationsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeConversationsRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ConversationsRepository);

  @override
  _i7.Future<_i3.Either<_i8.Failure, void>> call(
          _i11.MarkMessagesAsReadParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i7.Future<_i3.Either<_i8.Failure, void>>.value(
            _FakeEither_1<_i8.Failure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, void>>);
}

/// A class which mocks [DeleteConversation].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteConversation extends _i1.Mock
    implements _i11.DeleteConversation {
  MockDeleteConversation() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ConversationsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeConversationsRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ConversationsRepository);

  @override
  _i7.Future<_i3.Either<_i8.Failure, void>> call(
          _i11.ConversationParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i7.Future<_i3.Either<_i8.Failure, void>>.value(
            _FakeEither_1<_i8.Failure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, void>>);
}

/// A class which mocks [BlockConversation].
///
/// See the documentation for Mockito's code generation for more information.
class MockBlockConversation extends _i1.Mock implements _i11.BlockConversation {
  MockBlockConversation() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ConversationsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeConversationsRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ConversationsRepository);

  @override
  _i7.Future<_i3.Either<_i8.Failure, void>> call(
          _i11.ConversationParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i7.Future<_i3.Either<_i8.Failure, void>>.value(
            _FakeEither_1<_i8.Failure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, void>>);
}

/// A class which mocks [CloseConversation].
///
/// See the documentation for Mockito's code generation for more information.
class MockCloseConversation extends _i1.Mock implements _i11.CloseConversation {
  MockCloseConversation() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ConversationsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeConversationsRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ConversationsRepository);

  @override
  _i7.Future<_i3.Either<_i8.Failure, void>> call(
          _i11.ConversationParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i7.Future<_i3.Either<_i8.Failure, void>>.value(
            _FakeEither_1<_i8.Failure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, void>>);
}

/// A class which mocks [ConversationsRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockConversationsRemoteDataSource extends _i1.Mock
    implements _i12.ConversationsRemoteDataSource {
  MockConversationsRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i5.Conversation>> getConversations(
          {required String? userId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getConversations,
          [],
          {#userId: userId},
        ),
        returnValue:
            _i7.Future<List<_i5.Conversation>>.value(<_i5.Conversation>[]),
      ) as _i7.Future<List<_i5.Conversation>>);

  @override
  _i7.Future<List<_i4.Message>> getConversationMessages(
          {required String? conversationId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getConversationMessages,
          [],
          {#conversationId: conversationId},
        ),
        returnValue: _i7.Future<List<_i4.Message>>.value(<_i4.Message>[]),
      ) as _i7.Future<List<_i4.Message>>);

  @override
  _i7.Future<_i4.Message> sendMessage({
    required String? conversationId,
    required String? senderId,
    required String? content,
    _i13.MessageType? messageType = _i13.MessageType.text,
    List<String>? attachments = const [],
    Map<String, dynamic>? metadata = const {},
    double? offerPrice,
    String? offerAvailability,
    int? offerDeliveryDays,
    _i13.MessageSenderType? senderType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [],
          {
            #conversationId: conversationId,
            #senderId: senderId,
            #content: content,
            #messageType: messageType,
            #attachments: attachments,
            #metadata: metadata,
            #offerPrice: offerPrice,
            #offerAvailability: offerAvailability,
            #offerDeliveryDays: offerDeliveryDays,
            #senderType: senderType,
          },
        ),
        returnValue: _i7.Future<_i4.Message>.value(_FakeMessage_2(
          this,
          Invocation.method(
            #sendMessage,
            [],
            {
              #conversationId: conversationId,
              #senderId: senderId,
              #content: content,
              #messageType: messageType,
              #attachments: attachments,
              #metadata: metadata,
              #offerPrice: offerPrice,
              #offerAvailability: offerAvailability,
              #offerDeliveryDays: offerDeliveryDays,
              #senderType: senderType,
            },
          ),
        )),
      ) as _i7.Future<_i4.Message>);

  @override
  _i7.Future<void> markMessagesAsRead({
    required String? conversationId,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #markMessagesAsRead,
          [],
          {
            #conversationId: conversationId,
            #userId: userId,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> incrementUnreadCount({required String? conversationId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #incrementUnreadCount,
          [],
          {#conversationId: conversationId},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> incrementUnreadCountForUser(
          {required String? conversationId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #incrementUnreadCountForUser,
          [],
          {#conversationId: conversationId},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> incrementUnreadCountForSeller(
          {required String? conversationId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #incrementUnreadCountForSeller,
          [],
          {#conversationId: conversationId},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> updateConversationStatus({
    required String? conversationId,
    required _i13.ConversationStatus? status,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateConversationStatus,
          [],
          {
            #conversationId: conversationId,
            #status: status,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deleteConversation({required String? conversationId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteConversation,
          [],
          {#conversationId: conversationId},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> blockConversation({required String? conversationId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #blockConversation,
          [],
          {#conversationId: conversationId},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Stream<_i4.Message> subscribeToNewMessages(
          {required String? conversationId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToNewMessages,
          [],
          {#conversationId: conversationId},
        ),
        returnValue: _i7.Stream<_i4.Message>.empty(),
      ) as _i7.Stream<_i4.Message>);

  @override
  _i7.Stream<_i5.Conversation> subscribeToConversationUpdates(
          {required String? userId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToConversationUpdates,
          [],
          {#userId: userId},
        ),
        returnValue: _i7.Stream<_i5.Conversation>.empty(),
      ) as _i7.Stream<_i5.Conversation>);

  @override
  _i7.Future<_i5.Conversation> createOrGetConversation({
    required String? requestId,
    required String? userId,
    required String? sellerId,
    required String? sellerName,
    String? sellerCompany,
    required String? requestTitle,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createOrGetConversation,
          [],
          {
            #requestId: requestId,
            #userId: userId,
            #sellerId: sellerId,
            #sellerName: sellerName,
            #sellerCompany: sellerCompany,
            #requestTitle: requestTitle,
          },
        ),
        returnValue: _i7.Future<_i5.Conversation>.value(_FakeConversation_3(
          this,
          Invocation.method(
            #createOrGetConversation,
            [],
            {
              #requestId: requestId,
              #userId: userId,
              #sellerId: sellerId,
              #sellerName: sellerName,
              #sellerCompany: sellerCompany,
              #requestTitle: requestTitle,
            },
          ),
        )),
      ) as _i7.Future<_i5.Conversation>);
}

/// A class which mocks [RealtimeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRealtimeService extends _i1.Mock implements _i14.RealtimeService {
  MockRealtimeService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Stream<_i4.Message> get messageStream => (super.noSuchMethod(
        Invocation.getter(#messageStream),
        returnValue: _i7.Stream<_i4.Message>.empty(),
      ) as _i7.Stream<_i4.Message>);

  @override
  _i7.Stream<Map<String, dynamic>> get conversationStream =>
      (super.noSuchMethod(
        Invocation.getter(#conversationStream),
        returnValue: _i7.Stream<Map<String, dynamic>>.empty(),
      ) as _i7.Stream<Map<String, dynamic>>);

  @override
  _i7.Stream<_i4.Message> getMessageStreamForConversation(
          String? conversationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMessageStreamForConversation,
          [conversationId],
        ),
        returnValue: _i7.Stream<_i4.Message>.empty(),
      ) as _i7.Stream<_i4.Message>);

  @override
  _i7.Future<void> subscribeToMessagesForConversation(String? conversationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToMessagesForConversation,
          [conversationId],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> subscribeToConversationsForUser(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToConversationsForUser,
          [userId],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> startRealtimeSubscriptions() => (super.noSuchMethod(
        Invocation.method(
          #startRealtimeSubscriptions,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> subscribeToMessages(String? conversationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToMessages,
          [conversationId],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> subscribeToConversations(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToConversations,
          [userId],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> startSubscriptions() => (super.noSuchMethod(
        Invocation.method(
          #startSubscriptions,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> stopRealtimeSubscriptions() => (super.noSuchMethod(
        Invocation.method(
          #stopRealtimeSubscriptions,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void disposeConversationStream(String? conversationId) => super.noSuchMethod(
        Invocation.method(
          #disposeConversationStream,
          [conversationId],
        ),
        returnValueForMissingStub: null,
      );
}
