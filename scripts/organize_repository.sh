#!/bin/bash

# üßπ Script d'organisation du repository GitHub
# Usage: ./scripts/organize_repository.sh

set -e

echo "üßπ ORGANISATION REPOSITORY - Pi√®ces d'Occasion"
echo "=============================================="

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_header() {
    echo -e "${BLUE}üìã $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# =============================================================================
# 1. ANALYSE BRANCHES EXISTANTES
# =============================================================================

print_header "Analyse des branches existantes"

echo "üìä Branches locales:"
git branch | sed 's/^/  /'

echo ""
echo "üìä Branches remote:"
git branch -r | sed 's/^/  /'

echo ""
echo "üìä Statistiques:"
LOCAL_COUNT=$(git branch | wc -l)
REMOTE_COUNT=$(git branch -r | grep -v HEAD | wc -l)
echo "  ‚Ä¢ Branches locales: $LOCAL_COUNT"
echo "  ‚Ä¢ Branches remote: $REMOTE_COUNT"

# =============================================================================
# 2. IDENTIFICATION BRANCHES OBSOL√àTES
# =============================================================================

print_header "Identification branches obsol√®tes"

echo "üîç Branches avec fautes de frappe √† renommer:"
echo "  ‚Ä¢ feathure/* ‚Üí feature/*"
echo "  ‚Ä¢ style1 ‚Üí feature/ui-improvements"

echo ""
echo "üîç Branches potentiellement obsol√®tes (anciennes):"
git for-each-ref --format='%(refname:short) %(committerdate)' refs/heads | sort -k2 | head -10

# =============================================================================
# 3. V√âRIFICATION BRANCHES MERG√âES
# =============================================================================

print_header "V√©rification branches merg√©es"

echo "‚úÖ Branches d√©j√† merg√©es dans develop:"
git checkout develop > /dev/null 2>&1 || echo "Branch develop introuvable"
MERGED_BRANCHES=$(git branch --merged develop | grep -v "develop" | grep -v "main" | xargs || echo "Aucune")
if [ "$MERGED_BRANCHES" != "Aucune" ]; then
    echo "$MERGED_BRANCHES" | sed 's/^/  ‚Ä¢ /'
else
    echo "  Aucune branche merg√©e trouv√©e"
fi

# =============================================================================
# 4. PLAN DE NETTOYAGE
# =============================================================================

print_header "Plan de nettoyage recommand√©"

cat << 'EOF'

üìã ACTIONS RECOMMAND√âES:

üóÇÔ∏è  STRUCTURE CIBLE:
    main/              # Production
    develop/           # D√©veloppement
    staging/           # Pr√©-production

    feature/           # Nouvelles fonctionnalit√©s
    bugfix/            # Corrections bugs
    hotfix/            # Corrections urgentes
    release/           # Pr√©paration releases

üßπ NETTOYAGE √Ä FAIRE:

1. RENOMMER (fautes de frappe):
   feathure/Loinding-pro-particulier ‚Üí feature/loading-pro-particulier
   feathure/demande ‚Üí feature/request-management
   feathure/d√©posit-annonce ‚Üí feature/post-advertisement
   feathure/home-pro ‚Üí feature/professional-home
   feathure/recherche-piece ‚Üí feature/parts-search
   style1 ‚Üí feature/ui-improvements

2. SUPPRIMER (si merg√©es):
   ‚Ä¢ Toutes les branches --merged develop
   ‚Ä¢ Branches de test obsol√®tes
   ‚Ä¢ Branches avec noms incoh√©rents

3. CR√âER STRUCTURE:
   ‚Ä¢ develop (si manquante)
   ‚Ä¢ staging (si manquante)
   ‚Ä¢ Protection branches main/develop

4. ORGANISER:
   ‚Ä¢ Trier par type (feature/, bugfix/, etc.)
   ‚Ä¢ Standardiser noms en anglais
   ‚Ä¢ Nettoyer branches remote orphelines

EOF

# =============================================================================
# 5. SCRIPT INTERACTIF
# =============================================================================

print_header "Actions automatiques"

echo "Voulez-vous proc√©der au nettoyage automatique ? (y/n)"
read -r response

if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then

    print_info "Cr√©ation branches principales manquantes..."

    # Cr√©er develop si n'existe pas
    if ! git show-ref --verify --quiet refs/heads/develop; then
        print_warning "Cr√©ation branch develop depuis main"
        git checkout main
        git checkout -b develop
        git push origin develop
        print_success "Branch develop cr√©√©e"
    fi

    # Cr√©er staging si n'existe pas
    if ! git show-ref --verify --quiet refs/heads/staging; then
        print_warning "Cr√©ation branch staging depuis develop"
        git checkout develop
        git checkout -b staging
        git push origin staging
        print_success "Branch staging cr√©√©e"
    fi

    print_info "Nettoyage branches merg√©es..."

    # Retour sur develop pour nettoyage
    git checkout develop

    # Supprimer branches locales merg√©es (sauf main/develop/staging)
    MERGED_TO_DELETE=$(git branch --merged | grep -v -E "main|develop|staging|\*" | xargs)
    if [ -n "$MERGED_TO_DELETE" ]; then
        print_warning "Suppression branches locales merg√©es: $MERGED_TO_DELETE"
        echo "$MERGED_TO_DELETE" | xargs git branch -d
        print_success "Branches locales nettoy√©es"
    fi

    # Nettoyer r√©f√©rences remote obsol√®tes
    print_info "Nettoyage r√©f√©rences remote..."
    git remote prune origin
    print_success "R√©f√©rences remote nettoy√©es"

    print_info "Mise √† jour toutes les branches..."
    git fetch --all
    print_success "Repository synchronis√©"

else
    print_info "Nettoyage annul√© - ex√©cution manuelle recommand√©e"
fi

# =============================================================================
# 6. RAPPORT FINAL
# =============================================================================

print_header "Rapport final"

echo "üìä √âtat apr√®s nettoyage:"
echo "  ‚Ä¢ Branches locales: $(git branch | wc -l)"
echo "  ‚Ä¢ Branches remote: $(git branch -r | grep -v HEAD | wc -l)"

echo ""
echo "üéØ PROCHAINES √âTAPES MANUELLES:"
echo ""
echo "1. üîÑ RENOMMER BRANCHES (manuellement):"
echo "   git branch -m feathure/demande feature/request-management"
echo "   git push origin feature/request-management"
echo "   git push origin --delete feathure/demande"
echo ""
echo "2. üõ°Ô∏è CONFIGURER PROTECTIONS (GitHub Settings):"
echo "   ‚Ä¢ main: Require PR + 2 reviews + tests"
echo "   ‚Ä¢ develop: Require PR + 1 review + tests"
echo ""
echo "3. üìã CR√âER PR TEMPLATE:"
echo "   ‚Ä¢ .github/pull_request_template.md"
echo ""
echo "4. üè∑Ô∏è STANDARDISER NOMS:"
echo "   ‚Ä¢ Tout en anglais"
echo "   ‚Ä¢ Format: type/description-with-dashes"
echo ""

print_success "Organisation repository termin√©e !"
echo ""
echo "üìñ Consultez docs/GIT_STRATEGY.md pour la strat√©gie compl√®te"
echo ""