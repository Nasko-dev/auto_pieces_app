import 'package:supabase_flutter/supabase_flutter.dart';
import '../../../../core/errors/exceptions.dart';
import '../../../../core/services/device_service.dart';
import '../models/particulier_model.dart';

abstract class ParticulierAuthRemoteDataSource {
  Future<ParticulierModel> signInAnonymously();

  Future<void> logout();

  Future<ParticulierModel> getCurrentParticulier();

  Future<bool> isLoggedIn();

  Future<ParticulierModel> updateParticulier(ParticulierModel particulier);
}

class ParticulierAuthRemoteDataSourceImpl implements ParticulierAuthRemoteDataSource {
  final SupabaseClient supabaseClient;
  final DeviceService deviceService;

  ParticulierAuthRemoteDataSourceImpl({
    required this.supabaseClient, 
    required this.deviceService,
  });

  @override
  Future<ParticulierModel> signInAnonymously() async {
    try {
      print('üë§ [DataSource] Connexion anonyme avec persistance device');

      // 1. Obtenir l'ID de l'appareil
      final deviceId = await deviceService.getDeviceId();
      print('üì± [DataSource] Device ID: $deviceId');

      // 2. V√©rifier si un particulier existe d√©j√† pour cet appareil
      print('üîç [DataSource] D√©but recherche particulier existant pour device: $deviceId');
      
      // D'abord, v√©rifier tous les utilisateurs avec ce device_id
      try {
        print('üîç [DataSource] Recherche TOUS les utilisateurs avec ce device_id...');
        final allUsersWithDeviceId = await supabaseClient
            .from('particuliers')
            .select()
            .eq('device_id', deviceId);
            
        print('üìä [DataSource] Utilisateurs trouv√©s avec device_id $deviceId: ${allUsersWithDeviceId.length}');
        for (int i = 0; i < allUsersWithDeviceId.length; i++) {
          final user = allUsersWithDeviceId[i];
          print('üë§ [DataSource] Utilisateur $i: id=${user['id']}, is_anonymous=${user['is_anonymous']}, device_id=${user['device_id']}');
        }
      } catch (e) {
        print('‚ö†Ô∏è [DataSource] Erreur recherche tous utilisateurs: $e');
      }
      
      // Maintenant, recherche sp√©cifique pour utilisateur anonyme
      try {
        print('üìä [DataSource] Ex√©cution requ√™te Supabase pour recherche existante (anonyme seulement)...');
        final existingUser = await supabaseClient
            .from('particuliers')
            .select()
            .eq('device_id', deviceId)
            .eq('is_anonymous', true)
            .maybeSingle();

        print('üéØ [DataSource] R√©sultat recherche existante (anonyme): ${existingUser != null ? "TROUV√â" : "NON TROUV√â"}');
        
        if (existingUser != null) {
          print('‚úÖ [DataSource] Particulier existant trouv√© pour ce device: ${existingUser['id']}');
          print('üìã [DataSource] Donn√©es utilisateur existant: $existingUser');
          
          // Se connecter avec le compte existant via Supabase auth
          try {
            print('üîê [DataSource] Tentative connexion anonyme pour utilisateur existant...');
            final authResponse = await supabaseClient.auth.signInAnonymously();
            if (authResponse.user != null) {
              print('‚úÖ [DataSource] Connexion anonyme r√©ussie pour utilisateur existant: ${authResponse.user!.id}');
              // Retourner le particulier existant avec le nouvel auth ID
              final existingParticulier = ParticulierModel.fromJson(existingUser).copyWith(
                id: authResponse.user!.id, // Nouveau auth ID
              ) as ParticulierModel;
              print('üéâ [DataSource] Retour utilisateur existant avec nouvel auth ID');
              return existingParticulier;
            } else {
              print('‚ùå [DataSource] √âchec connexion anonyme: user null');
            }
          } catch (authError) {
            print('‚ö†Ô∏è [DataSource] √âchec auth pour utilisateur existant, cr√©ation nouveau compte: $authError');
          }
        } else {
          print('üëª [DataSource] Aucun particulier anonyme existant trouv√© pour device: $deviceId');
          
          // Essayer de trouver un utilisateur non-anonyme et le convertir
          try {
            print('üîÑ [DataSource] Recherche utilisateur non-anonyme √† convertir...');
            final nonAnonymousUser = await supabaseClient
                .from('particuliers')
                .select()
                .eq('device_id', deviceId)
                .eq('is_anonymous', false)
                .maybeSingle();
                
            if (nonAnonymousUser != null) {
              print('üîÑ [DataSource] Utilisateur non-anonyme trouv√©, conversion en anonyme...');
              // Mettre √† jour pour le marquer comme anonyme
              await supabaseClient
                  .from('particuliers')
                  .update({'is_anonymous': true})
                  .eq('id', nonAnonymousUser['id']);
              
              // Se connecter avec ce compte converti
              final authResponse = await supabaseClient.auth.signInAnonymously();
              if (authResponse.user != null) {
                final convertedUser = ParticulierModel.fromJson(nonAnonymousUser).copyWith(
                  id: authResponse.user!.id,
                  isAnonymous: true,
                ) as ParticulierModel;
                print('‚úÖ [DataSource] Utilisateur converti en anonyme avec succ√®s');
                return convertedUser;
              }
            }
          } catch (conversionError) {
            print('‚ö†Ô∏è [DataSource] Erreur conversion utilisateur: $conversionError');
          }
        }
      } catch (e) {
        print('‚ö†Ô∏è [DataSource] Erreur recherche particulier existant: $e');
        print('üìù [DataSource] Type erreur: ${e.runtimeType}');
        print('üìù [DataSource] Message erreur: ${e.toString()}');
      }

      // 3. Cr√©er un nouveau compte anonyme
      print('üÜï [DataSource] Cr√©ation nouveau compte anonyme');
      final authResponse = await supabaseClient.auth.signInAnonymously();

      if (authResponse.user == null) {
        print('‚ùå [DataSource] √âchec connexion anonyme: utilisateur null');
        throw const ServerException('√âchec de la connexion anonyme');
      }

      print('‚úÖ [DataSource] Nouvelle connexion anonyme r√©ussie: ${authResponse.user!.id}');

      // 4. Cr√©er le mod√®le avec device_id
      final particulierModel = ParticulierModel.fromAnonymousAuth(
        id: authResponse.user!.id,
        deviceId: deviceId,
        createdAt: DateTime.parse(authResponse.user!.createdAt),
      );

      // 5. Ins√©rer dans la table particuliers avec device_id
      try {
        print('üìù [DataSource] Insertion nouveau particulier avec device_id...');
        print('üìä [DataSource] Donn√©es √† ins√©rer: ${particulierModel.toInsert()}');
        await supabaseClient.from('particuliers').insert(particulierModel.toInsert());
        print('‚úÖ [DataSource] Insertion table particuliers r√©ussie');
      } catch (e) {
        print('‚ö†Ô∏è [DataSource] Erreur insertion table: $e');
        print('üìù [DataSource] Type erreur insertion: ${e.runtimeType}');
        print('üìù [DataSource] Message erreur insertion: ${e.toString()}');
        // Continue m√™me si l'insertion en table √©choue
      }

      return particulierModel;

    } on AuthException catch (e) {
      print('‚ùå [DataSource] Erreur auth: ${e.message}');
      throw ServerException(e.message);
    } catch (e) {
      print('‚ùå [DataSource] Erreur: $e');
      throw ServerException('Erreur lors de la connexion anonyme: $e');
    }
  }

  @override
  Future<void> logout() async {
    try {
      print('üö™ [DataSource] D√©connexion particulier');
      
      // D√©connexion globale pour nettoyer toutes les sessions
      await supabaseClient.auth.signOut(scope: SignOutScope.global);
      
      print('‚úÖ [DataSource] D√©connexion r√©ussie');
    } catch (e) {
      print('‚ùå [DataSource] Erreur d√©connexion: $e');
      throw ServerException('Erreur lors de la d√©connexion: $e');
    }
  }

  @override
  Future<ParticulierModel> getCurrentParticulier() async {
    try {
      print('üë§ [DataSource] R√©cup√©ration particulier actuel');

      final user = supabaseClient.auth.currentUser;
      if (user == null) {
        print('‚ùå [DataSource] Aucun utilisateur connect√©');
        throw const ServerException('Aucun utilisateur connect√©');
      }

      print('‚úÖ [DataSource] Utilisateur trouv√©: ${user.id}');

      // V√©rifier si c'est un utilisateur anonyme
      if (user.isAnonymous) {
        print('üë§ [DataSource] Utilisateur anonyme d√©tect√©');
        final deviceId = await deviceService.getDeviceId();
        return ParticulierModel.fromAnonymousAuth(
          id: user.id,
          deviceId: deviceId,
          createdAt: DateTime.parse(user.createdAt),
        );
      }

      // Essayer de r√©cup√©rer depuis la table particuliers pour utilisateur avec email
      try {
        final userData = await supabaseClient
            .from('particuliers')
            .select()
            .eq('id', user.id)
            .single();

        return ParticulierModel.fromJson(userData);
      } catch (e) {
        print('‚ö†Ô∏è [DataSource] Table particuliers non trouv√©e, fallback auth: $e');
        // Fallback sur les donn√©es auth
        return ParticulierModel.fromSupabaseAuth(
          id: user.id,
          email: user.email!,
          createdAt: DateTime.parse(user.createdAt),
          emailConfirmedAt: user.emailConfirmedAt != null
              ? DateTime.parse(user.emailConfirmedAt!)
              : null,
        );
      }

    } catch (e) {
      print('‚ùå [DataSource] Erreur: $e');
      throw ServerException('Erreur lors de la r√©cup√©ration de l\'utilisateur: $e');
    }
  }

  @override
  Future<bool> isLoggedIn() async {
    try {
      final user = supabaseClient.auth.currentUser;
      return user != null;
    } catch (e) {
      return false;
    }
  }

  @override
  Future<ParticulierModel> updateParticulier(ParticulierModel particulier) async {
    try {
      print('üíæ [DataSource] Mise √† jour particulier: ${particulier.id}');

      final dataToUpdate = {
        'first_name': particulier.firstName,
        'last_name': particulier.lastName,
        'phone': particulier.phone,
        'address': particulier.address,
        'city': particulier.city,
        'zip_code': particulier.zipCode,
        'updated_at': DateTime.now().toIso8601String(),
      };

      print('üìä [DataSource] Donn√©es √† mettre √† jour: $dataToUpdate');

      final response = await supabaseClient
          .from('particuliers')
          .update(dataToUpdate)
          .eq('id', particulier.id)
          .select()
          .single();

      print('‚úÖ [DataSource] Particulier mis √† jour: $response');

      return ParticulierModel.fromJson(response);
    } catch (e) {
      print('‚ùå [DataSource] Erreur mise √† jour: $e');
      throw ServerException('Erreur lors de la mise √† jour du particulier: $e');
    }
  }
}