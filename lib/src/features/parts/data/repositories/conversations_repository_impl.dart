import 'package:dartz/dartz.dart';
import '../../../../core/errors/failures.dart';
import '../../../../core/errors/exceptions.dart';
import '../../domain/repositories/conversations_repository.dart';
import '../../domain/entities/conversation.dart';
import '../../domain/entities/message.dart';
import '../../domain/entities/conversation_enums.dart';
import '../datasources/conversations_remote_datasource.dart';

class ConversationsRepositoryImpl implements ConversationsRepository {
  final ConversationsRemoteDataSource remoteDataSource;

  ConversationsRepositoryImpl({required this.remoteDataSource});

  @override
  Future<Either<Failure, List<Conversation>>> getConversations({required String userId}) async {
    try {
      print('üìã [Repository] R√©cup√©ration conversations pour: $userId');
      final conversations = await remoteDataSource.getConversations(userId: userId);
      print('‚úÖ [Repository] ${conversations.length} conversations r√©cup√©r√©es');
      return Right(conversations);
    } on ServerException catch (e) {
      print('‚ùå [Repository] Erreur serveur: ${e.message}');
      return Left(ServerFailure(e.message));
    } catch (e) {
      print('‚ùå [Repository] Erreur g√©n√©rale: $e');
      return Left(ServerFailure( 'Erreur lors de la r√©cup√©ration des conversations'));
    }
  }

  @override
  Future<Either<Failure, List<Message>>> getConversationMessages({
    required String conversationId
  }) async {
    try {
      print('üí¨ [Repository] R√©cup√©ration messages pour: $conversationId');
      final messages = await remoteDataSource.getConversationMessages(
        conversationId: conversationId
      );
      print('‚úÖ [Repository] ${messages.length} messages r√©cup√©r√©s');
      return Right(messages);
    } on ServerException catch (e) {
      print('‚ùå [Repository] Erreur serveur: ${e.message}');
      return Left(ServerFailure(e.message));
    } catch (e) {
      print('‚ùå [Repository] Erreur g√©n√©rale: $e');
      return Left(ServerFailure( 'Erreur lors de la r√©cup√©ration des messages'));
    }
  }

  @override
  Future<Either<Failure, Message>> sendMessage({
    required String conversationId,
    required String senderId,
    required String content,
    MessageType messageType = MessageType.text,
    double? offerPrice,
    String? offerAvailability,
    int? offerDeliveryDays,
  }) async {
    try {
      print('üì§ [Repository] Envoi message: $content');
      final message = await remoteDataSource.sendMessage(
        conversationId: conversationId,
        senderId: senderId,
        content: content,
        messageType: messageType,
        offerPrice: offerPrice,
        offerAvailability: offerAvailability,
        offerDeliveryDays: offerDeliveryDays,
      );
      print('‚úÖ [Repository] Message envoy√© avec succ√®s');
      return Right(message);
    } on ServerException catch (e) {
      print('‚ùå [Repository] Erreur serveur: ${e.message}');
      return Left(ServerFailure(e.message));
    } catch (e) {
      print('‚ùå [Repository] Erreur g√©n√©rale: $e');
      return Left(ServerFailure( 'Erreur lors de l\'envoi du message'));
    }
  }

  @override
  Future<Either<Failure, void>> markMessagesAsRead({
    required String conversationId,
    required String userId,
  }) async {
    try {
      print('üëÄ [Repository] Marquage messages comme lus: $conversationId');
      await remoteDataSource.markMessagesAsRead(
        conversationId: conversationId,
        userId: userId,
      );
      print('‚úÖ [Repository] Messages marqu√©s comme lus');
      return const Right(null);
    } on ServerException catch (e) {
      print('‚ùå [Repository] Erreur serveur: ${e.message}');
      return Left(ServerFailure(e.message));
    } catch (e) {
      print('‚ùå [Repository] Erreur g√©n√©rale: $e');
      return Left(ServerFailure( 'Erreur lors du marquage des messages'));
    }
  }

  @override
  Future<Either<Failure, void>> incrementUnreadCount({
    required String conversationId,
  }) async {
    try {
      print('üìà [Repository] Incr√©mentation compteur: $conversationId');
      await remoteDataSource.incrementUnreadCount(
        conversationId: conversationId,
      );
      print('‚úÖ [Repository] Compteur incr√©ment√©');
      return const Right(null);
    } on ServerException catch (e) {
      print('‚ùå [Repository] Erreur serveur: ${e.message}');
      return Left(ServerFailure(e.message));
    } catch (e) {
      print('‚ùå [Repository] Erreur g√©n√©rale: $e');
      return Left(ServerFailure( 'Erreur lors de l\'incr√©mentation du compteur'));
    }
  }

  @override
  Future<Either<Failure, void>> deleteConversation({
    required String conversationId
  }) async {
    try {
      print('üóëÔ∏è [Repository] Suppression conversation: $conversationId');
      await remoteDataSource.deleteConversation(conversationId: conversationId);
      print('‚úÖ [Repository] Conversation supprim√©e');
      return const Right(null);
    } on ServerException catch (e) {
      print('‚ùå [Repository] Erreur serveur: ${e.message}');
      return Left(ServerFailure(e.message));
    } catch (e) {
      print('‚ùå [Repository] Erreur g√©n√©rale: $e');
      return Left(ServerFailure( 'Erreur lors de la suppression de la conversation'));
    }
  }

  @override
  Future<Either<Failure, void>> blockConversation({
    required String conversationId
  }) async {
    try {
      print('üö´ [Repository] Blocage conversation: $conversationId');
      await remoteDataSource.blockConversation(conversationId: conversationId);
      print('‚úÖ [Repository] Conversation bloqu√©e');
      return const Right(null);
    } on ServerException catch (e) {
      print('‚ùå [Repository] Erreur serveur: ${e.message}');
      return Left(ServerFailure(e.message));
    } catch (e) {
      print('‚ùå [Repository] Erreur g√©n√©rale: $e');
      return Left(ServerFailure( 'Erreur lors du blocage de la conversation'));
    }
  }

  @override
  Future<Either<Failure, void>> closeConversation({
    required String conversationId
  }) async {
    try {
      print('üì™ [Repository] Fermeture conversation: $conversationId');
      await remoteDataSource.updateConversationStatus(
        conversationId: conversationId,
        status: ConversationStatus.closed,
      );
      print('‚úÖ [Repository] Conversation ferm√©e');
      return const Right(null);
    } on ServerException catch (e) {
      print('‚ùå [Repository] Erreur serveur: ${e.message}');
      return Left(ServerFailure(e.message));
    } catch (e) {
      print('‚ùå [Repository] Erreur g√©n√©rale: $e');
      return Left(ServerFailure( 'Erreur lors de la fermeture de la conversation'));
    }
  }

  @override
  Stream<Either<Failure, Message>> subscribeToNewMessages({
    required String conversationId
  }) {
    try {
      print('üì° [Repository] Abonnement messages realtime: $conversationId');
      return remoteDataSource
          .subscribeToNewMessages(conversationId: conversationId)
          .map((message) => Right<Failure, Message>(message))
          .handleError((error) {
            print('‚ùå [Repository] Erreur realtime messages: $error');
            return Left<Failure, Message>(
              ServerFailure( 'Erreur de connexion realtime')
            );
          });
    } catch (e) {
      print('‚ùå [Repository] Erreur cr√©ation stream messages: $e');
      return Stream.value(
        Left(ServerFailure( 'Erreur lors de la cr√©ation du stream'))
      );
    }
  }

  @override
  Stream<Either<Failure, List<Conversation>>> subscribeToConversationUpdates({
    required String userId
  }) {
    try {
      print('üì° [Repository] Abonnement conversations realtime: $userId');
      return remoteDataSource
          .subscribeToConversationUpdates(userId: userId)
          .asyncMap((conversation) async {
            // R√©cup√©rer la liste compl√®te des conversations
            final result = await getConversations(userId: userId);
            return result;
          })
          .handleError((error) {
            print('‚ùå [Repository] Erreur realtime conversations: $error');
            return Left<Failure, List<Conversation>>(
              ServerFailure( 'Erreur de connexion realtime')
            );
          });
    } catch (e) {
      print('‚ùå [Repository] Erreur cr√©ation stream conversations: $e');
      return Stream.value(
        Left(ServerFailure( 'Erreur lors de la cr√©ation du stream'))
      );
    }
  }
}