import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import '../services/realtime_service.dart';
import '../../features/parts/domain/repositories/part_request_repository.dart';
import '../../features/parts/domain/entities/particulier_conversation.dart';
import '../../features/parts/domain/services/particulier_conversation_grouping_service.dart';
import 'part_request_providers.dart';

part 'particulier_conversations_providers.freezed.dart';

@freezed
class ParticulierConversationsState with _$ParticulierConversationsState {
  const ParticulierConversationsState._();

  const factory ParticulierConversationsState({
    @Default([]) List<ParticulierConversation> conversations,
    @Default(false) bool isLoading,
    String? error,
    String? activeConversationId,
    @Default(0) int demandesCount, // Count rapide des demandes
    @Default(0) int annoncesCount, // Count rapide des annonces
    @Default(false) bool isLoadingAnnonces, // Chargement en cours des annonces
    DateTime? lastLoadedAt, // Timestamp du dernier chargement pour cache intelligent
    @Default(false) bool needsReload, // Flag pour forcer le rechargement apr√®s invalidation
  }) = _ParticulierConversationsState;

  int get unreadCount =>
      conversations.fold(0, (sum, conv) => sum + conv.unreadCount);

  // ‚úÖ CACHE: V√©rifier si les donn√©es sont encore fra√Æches (< 5 minutes)
  bool get isFresh {
    if (lastLoadedAt == null) return false;
    final age = DateTime.now().difference(lastLoadedAt!);
    return age.inMinutes < 5;
  }

  // ‚úÖ CACHE: V√©rifier si on doit recharger
  bool get shouldReload => conversations.isEmpty || !isFresh || needsReload;
}

class ParticulierConversationsController
    extends StateNotifier<ParticulierConversationsState> {
  final PartRequestRepository _repository;
  final RealtimeService _realtimeService;
  Timer? _pollingTimer;
  bool _isPollingActive = false;

  bool _isRealtimeInitialized = false;
  RealtimeChannel? _realtimeChannel; // ‚úÖ FIX: Garder r√©f√©rence pour unsubscribe

  // ‚úÖ FIX RACE CONDITION: Tracker les derni√®res incr√©mentations optimistes
  final Map<String, DateTime> _recentOptimisticIncrements = {};

  ParticulierConversationsController({
    required PartRequestRepository repository,
    required RealtimeService realtimeService,
  })  : _repository = repository,
        _realtimeService = realtimeService,
        super(const ParticulierConversationsState()) {
    _initializeRealtimeSubscriptions();
    // Le polling sera d√©marr√© dans initializeRealtime() avec les bons IDs
  }

  void _initializeRealtimeSubscriptions() {
    _realtimeService.startSubscriptions();
  }

  // Abonnement global aux messages - m√™me structure que le vendeur
  // ‚úÖ FIX RACE CONDITION: Fonction synchrone pour √©viter appels concurrents
  void initializeRealtime(String userId) {
    if (_isRealtimeInitialized) {
      return;
    }

    _isRealtimeInitialized = true;
    _startIntelligentPolling();
    _subscribeToGlobalMessages(userId);
  }

  // S'abonner globalement aux messages - exactement comme le vendeur
  void _subscribeToGlobalMessages(String userId) async {
    // ‚úÖ FIX: Unsubscribe ancien channel si existe
    if (_realtimeChannel != null) {
      await Supabase.instance.client.removeChannel(_realtimeChannel!);
      _realtimeChannel = null;
    }

    // Cr√©er un channel pour √©couter TOUS les messages o√π l'utilisateur est impliqu√©
    _realtimeChannel = Supabase.instance.client
        .channel('global_particulier_messages_$userId')
        .onPostgresChanges(
          event: PostgresChangeEvent.insert,
          schema: 'public',
          table: 'messages',
          callback: (payload) {
            _handleGlobalNewMessage(payload.newRecord, userId);
          },
        )
        .onPostgresChanges(
          event: PostgresChangeEvent.update,
          schema: 'public',
          table: 'conversations',
          callback: (payload) {
            // ‚úÖ OPTIMISATION: Mettre √† jour seulement la conversation concern√©e
            final conversationId = payload.newRecord['id'] as String?;
            if (conversationId != null) {
              _loadSingleConversationQuietly(conversationId);
            }
          },
        );

    _realtimeChannel!.subscribe();
    debugPrint('üì° [Realtime] Channel subscribed: global_particulier_messages_$userId');
  }

  // ‚úÖ DB-BASED: G√©rer un nouveau message re√ßu - incr√©menter compteur DB
  void _handleGlobalNewMessage(dynamic messageData, String userId) async {
    final conversationId = messageData['conversation_id'] as String?;
    final senderId = messageData['sender_id'] as String?;
    final senderType = messageData['sender_type'] as String?;

    debugPrint('üîî [Provider] _handleGlobalNewMessage appel√©');
    debugPrint('   conversationId: $conversationId');
    debugPrint('   senderId: $senderId');
    debugPrint('   userId: $userId');
    debugPrint('   activeConversationId: ${state.activeConversationId}');

    if (conversationId == null || senderId == null || senderType == null) {
      debugPrint('   ‚ùå Donn√©es manquantes - abandon');
      return;
    }

    // ‚úÖ CRITICAL FIX: V√©rifier que ce n'est pas notre propre message
    // Le senderId est l'auth ID, il faut comparer avec l'auth ID actuel
    final currentAuthId = Supabase.instance.client.auth.currentUser?.id;
    if (currentAuthId != null && senderId == currentAuthId) {
      debugPrint('   ‚ùå C\'est notre propre message (auth ID match) - ignor√©');
      return;
    }

    // ‚úÖ DB-BASED: D√©terminer si ce message nous est destin√© selon notre r√¥le dans la conversation
    try {
      // Utiliser la logique intelligente - tous les messages non-propres peuvent nous √™tre destin√©s
      if (state.activeConversationId == conversationId) {
        // Marquer le message comme lu imm√©diatement si la conversation est ouverte
        debugPrint('   ‚úÖ Conversation active ‚Üí marquer comme lu');
        _markConversationAsReadInDB(conversationId);
      } else {
        debugPrint('   ‚úÖ Conversation inactive ‚Üí incr√©menter compteur');
        _incrementUnreadCountForUserOnly(conversationId);
      }
    } catch (e) {
      // En cas d'erreur, logger pour debug
      debugPrint('   ‚ùå ERREUR dans _handleGlobalNewMessage: $e');
    }
  }

  // ‚úÖ FIX: Rendre public pour permettre start/stop depuis provider
  void startPolling() {
    if (_isPollingActive) return;

    _isPollingActive = true;

    _pollingTimer = Timer.periodic(const Duration(seconds: 30), (timer) {
      if (mounted) {
        _loadConversationsQuietly();
      }
    });

    debugPrint('üîÑ [Polling] D√©marr√© (toutes les 30s)');
  }

  // ‚úÖ FIX: Arr√™ter le polling proprement
  void stopPolling() {
    _pollingTimer?.cancel();
    _pollingTimer = null;
    _isPollingActive = false;
    debugPrint('‚è∏Ô∏è [Polling] Arr√™t√©');
  }

  void _startIntelligentPolling() {
    startPolling();
  }

  // ‚úÖ OPTIMISATION OPTION C: Charger d'abord les counts, puis les donn√©es
  Future<void> loadConversations() async {
    state = state.copyWith(isLoading: true, error: null, needsReload: false);

    // 1. Charger rapidement les counts pour savoir quels onglets afficher
    final countsResult = await _repository.getConversationsCounts();

    await countsResult.fold(
      (failure) async {
        if (mounted) {
          state = state.copyWith(
            isLoading: false,
            error: failure.message,
          );
        }
      },
      (counts) async {
        if (mounted) {
          // Mettre √† jour les counts imm√©diatement
          state = state.copyWith(
            demandesCount: counts['demandes'] ?? 0,
            annoncesCount: counts['annonces'] ?? 0,
          );

          // 2. Charger les vraies donn√©es des demandes en priorit√©
          final demandesResult = await _repository.getParticulierConversations(
            filterType: 'demandes',
          );

          demandesResult.fold(
            (failure) {
              if (mounted) {
                state = state.copyWith(
                  isLoading: false,
                  error: failure.message,
                );
              }
            },
            (demandes) {
              if (mounted) {
                // ‚úÖ FIX: V√©rifier AVANT de modifier le state si annonces d√©j√† charg√©es
                final currentAnnoncesLoaded = state.conversations.where((c) => !c.isRequester).length;

                state = state.copyWith(
                  conversations: demandes,
                  isLoading: false,
                  error: null,
                  lastLoadedAt: DateTime.now(), // ‚úÖ CACHE: Timestamp du chargement
                );

                // 3. Pr√©charger les "Annonces" apr√®s 2 secondes si elles existent ET pas d√©j√† charg√©es
                final annoncesCount = counts['annonces'] ?? 0;

                debugPrint('üìä [Preload] Annonces count: $annoncesCount, d√©j√† charg√©es: $currentAnnoncesLoaded');

                if (annoncesCount > 0 && currentAnnoncesLoaded == 0) {
                  // ‚úÖ FIX: Pr√©charger seulement si aucune annonce n'√©tait charg√©e dans l'√©tat pr√©c√©dent
                  Future.delayed(const Duration(seconds: 2), () {
                    if (mounted) {
                      debugPrint('üîÑ [Preload] Lancement pr√©chargement annonces');
                      _preloadAnnonces(demandes);
                    }
                  });
                } else {
                  debugPrint('‚è≠Ô∏è [Preload] Skip pr√©chargement, annonces d√©j√† pr√©sentes');
                }
              }
            },
          );
        }
      },
    );
  }

  // ‚úÖ OPTIMISATION: Pr√©charger les annonces en arri√®re-plan
  Future<void> _preloadAnnonces(List<ParticulierConversation> demandes) async {
    if (mounted) {
      state = state.copyWith(isLoadingAnnonces: true);
    }

    final annoncesResult = await _repository.getParticulierConversations(
      filterType: 'annonces',
    );

    annoncesResult.fold(
      (failure) {
        if (mounted) {
          state = state.copyWith(isLoadingAnnonces: false);
        }
      },
      (annonces) {
        if (mounted) {
          // Fusionner demandes + annonces
          final allConversations = [...demandes, ...annonces];
          state = state.copyWith(
            conversations: allConversations,
            isLoadingAnnonces: false,
          );
        }
      },
    );
  }

  Future<void> _loadConversationsQuietly() async {
    final result = await _repository.getParticulierConversations();

    result.fold(
      (failure) => null,
      (conversations) {
        if (mounted) {
          // ‚úÖ FIX: Merge intelligent pour pr√©server les unreadCount optimistes
          final mergedConversations = conversations.map((newConv) {
            // V√©rifier si cette conversation a une protection active
            final lastIncrement = _recentOptimisticIncrements[newConv.id];
            final hasRecentIncrement = lastIncrement != null &&
                DateTime.now().difference(lastIncrement).inSeconds < 2;

            if (hasRecentIncrement) {
              // Trouver la conversation actuelle dans le state
              final currentConv = state.conversations.firstWhere(
                (c) => c.id == newConv.id,
                orElse: () => newConv,
              );

              debugPrint('üîÑ [Polling Merge] ${newConv.id}: pr√©server unreadCount optimiste=${currentConv.unreadCount}');

              // Merger: prendre tout de la DB SAUF unreadCount
              return newConv.copyWith(
                unreadCount: currentConv.unreadCount,
                hasUnreadMessages: currentConv.hasUnreadMessages,
              );
            }

            // Pas de protection: prendre les donn√©es DB telles quelles
            return newConv;
          }).toList();

          state = state.copyWith(
            conversations: mergedConversations,
          );
        }
      },
    );
  }

  // ‚úÖ OPTIMISATION: Charger seulement une conversation sp√©cifique
  Future<void> _loadSingleConversationQuietly(String conversationId) async {
    try {
      // ‚úÖ FIX RACE CONDITION: V√©rifier si incr√©mentation optimiste en cours
      final lastIncrement = _recentOptimisticIncrements[conversationId];
      final hasRecentIncrement = lastIncrement != null &&
          DateTime.now().difference(lastIncrement).inSeconds < 2;

      if (hasRecentIncrement) {
        debugPrint('üîÑ [_loadSingleConversationQuietly] Protection active - merge intelligent des donn√©es');
      } else if (lastIncrement != null) {
        // Nettoyer l'entr√©e expir√©e
        _recentOptimisticIncrements.remove(conversationId);
      }

      final result = await _repository.getParticulierConversationById(conversationId);

      result.fold(
        (failure) => null,
        (updatedConversation) {
          if (mounted) {
            // ‚úÖ FIX: Merger intelligent si protection active
            ParticulierConversation finalConversation = updatedConversation;

            if (hasRecentIncrement) {
              // Pr√©server le unreadCount optimiste de la conversation actuelle
              final currentConv = state.conversations.firstWhere(
                (c) => c.id == conversationId,
                orElse: () => updatedConversation,
              );

              debugPrint('   üîÄ Merge: DB unreadCount=${updatedConversation.unreadCount}, Local unreadCount=${currentConv.unreadCount}');
              debugPrint('   ‚úÖ Conservation du unreadCount local (optimiste)');

              // Prendre toutes les donn√©es de la DB SAUF le unreadCount
              finalConversation = updatedConversation.copyWith(
                unreadCount: currentConv.unreadCount,
                hasUnreadMessages: currentConv.hasUnreadMessages,
              );
            }

            // Mettre √† jour seulement cette conversation dans la liste
            final updatedList = state.conversations.map((conv) {
              return conv.id == conversationId ? finalConversation : conv;
            }).toList();

            state = state.copyWith(conversations: updatedList);
          }
        },
      );
    } catch (e) {
      // ‚úÖ FIX: Logger les erreurs au lieu de les ignorer silencieusement
      debugPrint('‚ùå [_loadSingleConversationQuietly] Erreur: $e');
    }
  }

  Future<void> loadConversationDetails(String conversationId) async {
    final result =
        await _repository.getParticulierConversationById(conversationId);

    result.fold(
      (failure) {
        if (mounted) {
          state = state.copyWith(error: failure.message);
        }
      },
      (conversation) {
        // Mettre √† jour la conversation dans la liste
        final updatedConversations = state.conversations
            .map((c) => c.id == conversationId ? conversation : c)
            .toList();

        if (mounted) {
          state = state.copyWith(
            conversations: updatedConversations,
            error: null,
          );
        }
      },
    );
  }

  Future<void> sendMessage(String conversationId, String content) async {
    final result = await _repository.sendParticulierMessage(
      conversationId: conversationId,
      content: content,
    );

    result.fold(
      (failure) {
        throw Exception(failure.message);
      },
      (_) {
        // Recharger la conversation pour voir le nouveau message
        loadConversationDetails(conversationId);
      },
    );
  }

  // ‚úÖ DB-BASED: Marquer conversation comme active et remettre compteur DB √† 0
  void markConversationAsRead(String conversationId) {
    // Marquer en DB
    _markConversationAsReadInDB(conversationId);

    // Marquer comme conversation active
    state = state.copyWith(activeConversationId: conversationId);
  }

  void _incrementUnreadCountForUserOnly(String conversationId) async {
    try {
      debugPrint('üìä [Provider] _incrementUnreadCountForUserOnly appel√©');
      debugPrint('   conversationId: $conversationId');

      final userId = Supabase.instance.client.auth.currentUser?.id;
      if (userId == null) {
        debugPrint('   ‚ùå userId est null - abandon');
        return;
      }

      // ‚úÖ FIX: D√©terminer le r√¥le et incr√©menter le BON compteur
      // Trouver la conversation dans le state pour savoir si on est le demandeur ou le r√©pondeur
      final conversationIndex = state.conversations.indexWhere((conv) => conv.id == conversationId);

      debugPrint('   conversationIndex: $conversationIndex');
      debugPrint('   Nombre total conversations: ${state.conversations.length}');

      if (conversationIndex == -1) {
        // ‚úÖ FIX: Conversation pas trouv√©e ‚Üí charger ET incr√©menter pour ne pas perdre le message
        debugPrint('   ‚ö†Ô∏è Conversation pas en m√©moire - chargement + incr√©mentation');

        // Charger la conversation pour d√©terminer le r√¥le et incr√©menter le bon compteur
        final result = await _repository.getParticulierConversationById(conversationId);

        result.fold(
          (failure) {
            debugPrint('   ‚ùå Erreur chargement conversation: ${failure.message}');
          },
          (loadedConversation) async {
            debugPrint('   ‚úÖ Conversation charg√©e: ${loadedConversation.sellerName}');
            debugPrint('   isRequester: ${loadedConversation.isRequester}');

            // Incr√©menter le bon compteur en DB
            if (loadedConversation.isRequester) {
              debugPrint('   üì§ Incr√©mentation DB: unread_count_for_user');
              await _repository.incrementUnreadCountForUser(conversationId: conversationId);
            } else {
              debugPrint('   üì§ Incr√©mentation DB: unread_count_for_seller');
              await _repository.incrementUnreadCountForSeller(conversationId: conversationId);
            }

            // Ajouter la conversation √† la liste avec compteur incr√©ment√©
            final updatedConversation = loadedConversation.copyWith(
              unreadCount: loadedConversation.unreadCount + 1,
              hasUnreadMessages: true,
            );

            if (mounted) {
              final updatedList = List<ParticulierConversation>.from(state.conversations);
              updatedList.add(updatedConversation);
              state = state.copyWith(conversations: updatedList);
              debugPrint('   ‚úÖ Conversation ajout√©e √† la liste avec unreadCount: ${updatedConversation.unreadCount}');

              // ‚úÖ FIX RACE CONDITION: Prot√©ger aussi cette incr√©mentation
              _recentOptimisticIncrements[conversationId] = DateTime.now();
              debugPrint('   üîí [Race Protection] Incr√©mentation optimiste prot√©g√©e pour 2s');
            }
          },
        );

        return;
      }

      final conversation = state.conversations[conversationIndex];
      debugPrint('   ‚úÖ Conversation trouv√©e: ${conversation.sellerName}');
      debugPrint('   unreadCount actuel: ${conversation.unreadCount}');
      debugPrint('   isRequester: ${conversation.isRequester}');

      // ‚úÖ OPTIMISATION CRITIQUE: Mise √† jour locale OPTIMISTE du compteur
      // Incr√©menter IMM√âDIATEMENT dans le state local pour que l'UI se mette √† jour
      final updatedConversation = conversation.copyWith(
        unreadCount: conversation.unreadCount + 1,
        hasUnreadMessages: true,
      );

      final updatedList = List<ParticulierConversation>.from(state.conversations);
      updatedList[conversationIndex] = updatedConversation;

      if (mounted) {
        debugPrint('   ‚úÖ MISE √Ä JOUR STATE: unreadCount ${conversation.unreadCount} ‚Üí ${updatedConversation.unreadCount}');
        state = state.copyWith(conversations: updatedList);

        // ‚úÖ FIX RACE CONDITION: Enregistrer le timestamp de l'incr√©mentation optimiste
        _recentOptimisticIncrements[conversationId] = DateTime.now();
        debugPrint('   üîí [Race Protection] Incr√©mentation optimiste prot√©g√©e pour 2s');
      } else {
        debugPrint('   ‚ùå Provider not mounted - skip update');
        return;
      }

      // ‚úÖ FIX: BACKGROUND avec rollback si erreur DB
      final dbIncrementFuture = conversation.isRequester
          ? _repository.incrementUnreadCountForUser(conversationId: conversationId)
          : _repository.incrementUnreadCountForSeller(conversationId: conversationId);

      dbIncrementFuture.then((result) {
        result.fold(
          (failure) {
            // ‚úÖ ROLLBACK: Restaurer la valeur pr√©c√©dente si erreur DB
            debugPrint('   ‚ùå ERREUR DB increment - ROLLBACK: ${failure.message}');

            // Nettoyer la protection
            _recentOptimisticIncrements.remove(conversationId);

            if (mounted) {
              final rollbackList = List<ParticulierConversation>.from(state.conversations);
              final currentIndex = rollbackList.indexWhere((c) => c.id == conversationId);
              if (currentIndex != -1) {
                rollbackList[currentIndex] = conversation; // Restaurer valeur originale
                state = state.copyWith(conversations: rollbackList);
                debugPrint('   ‚úÖ ROLLBACK effectu√©: unreadCount ${updatedConversation.unreadCount} ‚Üí ${conversation.unreadCount}');
              }
            }
          },
          (_) {
            // Succ√®s - nettoyer la protection puis recharger depuis DB pour synchroniser
            debugPrint('   ‚úÖ Incr√©mentation DB r√©ussie');

            // ‚úÖ FIX RACE CONDITION: Nettoyer la protection avant de recharger
            _recentOptimisticIncrements.remove(conversationId);
            debugPrint('   üîì [Race Protection] Protection lev√©e, rechargement autoris√©');

            _loadSingleConversationQuietly(conversationId);
          },
        );
      });
    } catch (e) {
      // Logger l'erreur au lieu de l'ignorer silencieusement
      debugPrint('   ‚ùå ERREUR dans _incrementUnreadCountForUserOnly: $e');
    }
  }

  void _markConversationAsReadInDB(String conversationId) async {
    try {
      await _repository.markParticulierMessagesAsRead(
        conversationId: conversationId,
      );
      // ‚úÖ OPTIMISATION: Mettre √† jour seulement cette conversation
      _loadSingleConversationQuietly(conversationId);
    } catch (e) {
      // ‚úÖ FIX: Logger les erreurs au lieu de les ignorer silencieusement
      debugPrint('‚ùå [_markConversationAsReadInDB] Erreur: $e');
    }
  }

  // ‚úÖ SIMPLE: D√©sactiver la conversation active
  void setConversationInactive() {
    // ‚úÖ SIMPLE: √âviter setState during build en diff√©rant la mise √† jour
    Future.microtask(() {
      state = state.copyWith(activeConversationId: null);
    });
  }

  Future<void> deleteConversation(String conversationId) async {
    // TODO: Impl√©menter la suppression c√¥t√© repository
    // Pour l'instant, on simule en retirant de la liste locale
    final updatedConversations =
        state.conversations.where((c) => c.id != conversationId).toList();

    if (mounted) {
      state = state.copyWith(conversations: updatedConversations);
    }
  }

  Future<void> blockConversation(String conversationId) async {
    // TODO: Impl√©menter le blocage c√¥t√© repository
    // Pour l'instant, on simule en retirant de la liste locale
    final updatedConversations =
        state.conversations.where((c) => c.id != conversationId).toList();

    if (mounted) {
      state = state.copyWith(conversations: updatedConversations);
    }
  }

  // ‚úÖ RELOAD: Marquer qu'un rechargement est n√©cessaire (appel√© apr√®s envoi de message)
  void markNeedsReload() {
    if (mounted) {
      state = state.copyWith(needsReload: true);
    }
  }

  @override
  void dispose() async {
    stopPolling(); // ‚úÖ FIX: Utiliser la m√©thode propre

    // ‚úÖ FIX: Unsubscribe du channel Realtime
    if (_realtimeChannel != null) {
      await Supabase.instance.client.removeChannel(_realtimeChannel!);
      _realtimeChannel = null;
      debugPrint('üì° [Realtime] Channel unsubscribed');
    }

    // ‚úÖ FIX: NE PAS disposer le RealtimeService singleton - il doit rester vivant
    // Le service g√®re lui-m√™me ses ressources avec unsubscribe
    // _realtimeService.dispose(); // ‚ùå SUPPRIM√â: casse le singleton

    super.dispose();
  }
}

// ‚úÖ FIX: Utiliser autoDispose pour √©viter fuites m√©moire, avec gestion intelligente du polling
final particulierConversationsControllerProvider = StateNotifierProvider.autoDispose<
    ParticulierConversationsController, ParticulierConversationsState>(
  (ref) {
    final repository = ref.read(partRequestRepositoryProvider);
    final realtimeService = ref.read(realtimeServiceProvider);

    final controller = ParticulierConversationsController(
      repository: repository,
      realtimeService: realtimeService,
    );

    // ‚úÖ FIX: Arr√™ter le polling quand plus de listeners actifs (√©conomie batterie/data)
    ref.onCancel(() {
      debugPrint('üìµ [Provider] Plus de listeners - arr√™t polling');
      controller.stopPolling();
    });

    // ‚úÖ FIX: Red√©marrer le polling quand nouveaux listeners
    ref.onResume(() {
      debugPrint('üì± [Provider] Nouveaux listeners - red√©marrage polling');
      controller.startPolling();
    });

    // ‚úÖ FIX: Garder le provider en vie pour conserver le cache
    ref.keepAlive();

    return controller;
  },
);

final realtimeServiceProvider = Provider<RealtimeService>((ref) {
  return RealtimeService();
});

// Provider pour le service de groupement
final particulierConversationGroupingServiceProvider = Provider((ref) {
  return ParticulierConversationGroupingService();
});

// Provider pour les groupes de conversations (group√©s par v√©hicule)
final particulierConversationGroupsProvider = Provider((ref) {
  final conversationsState =
      ref.watch(particulierConversationsControllerProvider);
  final groupingService =
      ref.watch(particulierConversationGroupingServiceProvider);

  return groupingService.groupConversations(conversationsState.conversations);
});

// Provider pour le compteur de messages non lus d'une conversation sp√©cifique
final particulierConversationUnreadCountProvider =
    Provider.family<int, String>((ref, conversationId) {
  final conversationsState =
      ref.watch(particulierConversationsControllerProvider);

  try {
    final conversation = conversationsState.conversations.firstWhere(
      (conv) => conv.id == conversationId,
    );
    return conversation.unreadCount;
  } catch (e) {
    // ‚úÖ FIX: Logger + retourner 0 si conversation non trouv√©e
    debugPrint('‚ö†Ô∏è [particulierConversationUnreadCountProvider] Conversation $conversationId non trouv√©e');
    return 0;
  }
});

// Provider pour les conversations "Demandes" (isRequester = true)
final demandesConversationsProvider = Provider((ref) {
  final conversationsState =
      ref.watch(particulierConversationsControllerProvider);

  return conversationsState.conversations
      .where((conv) => conv.isRequester)
      .toList();
});

// Provider pour les conversations "Annonces" (isRequester = false)
final annoncesConversationsProvider = Provider((ref) {
  final conversationsState =
      ref.watch(particulierConversationsControllerProvider);

  return conversationsState.conversations
      .where((conv) => !conv.isRequester)
      .toList();
});

// Provider pour les groupes "Demandes"
final demandesConversationGroupsProvider = Provider((ref) {
  final demandesConversations = ref.watch(demandesConversationsProvider);
  final groupingService =
      ref.watch(particulierConversationGroupingServiceProvider);

  return groupingService.groupConversations(demandesConversations);
});

// Provider pour les groupes "Annonces"
final annoncesConversationGroupsProvider = Provider((ref) {
  final annoncesConversations = ref.watch(annoncesConversationsProvider);
  final groupingService =
      ref.watch(particulierConversationGroupingServiceProvider);

  return groupingService.groupConversations(annoncesConversations);
});
