import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

/// Service de gestion de session avec persistance locale
/// G√®re l'auto-reconnexion et le cache de session
class SessionService {
  final SharedPreferences _prefs;
  final SupabaseClient _supabase;
  
  static const String _keyUserType = 'user_type'; // 'particulier' ou 'vendeur'
  static const String _keyLastSessionTime = 'last_session_time';
  static const String _keyAutoReconnect = 'auto_reconnect';
  static const String _keyUserId = 'cached_user_id';
  static const String _keyUserEmail = 'cached_user_email';
  static const String _keyUserRole = 'cached_user_role';
  
  // Dur√©e de validit√© du cache (7 jours)
  static const Duration _cacheValidity = Duration(days: 7);
  
  SessionService(this._prefs, this._supabase);
  
  /// V√©rifie si une session est en cache et toujours valide
  Future<bool> hasValidCachedSession() async {
    try {
      print('üîç [SessionService] V√©rification session en cache...');
      
      // V√©rifier si l'auto-reconnexion est activ√©e
      final autoReconnect = _prefs.getBool(_keyAutoReconnect) ?? true;
      if (!autoReconnect) {
        print('‚èπÔ∏è [SessionService] Auto-reconnexion d√©sactiv√©e');
        return false;
      }
      
      // V√©rifier la date de derni√®re session
      final lastSessionStr = _prefs.getString(_keyLastSessionTime);
      if (lastSessionStr == null) {
        print('‚ùå [SessionService] Pas de session en cache');
        return false;
      }
      
      final lastSession = DateTime.parse(lastSessionStr);
      final now = DateTime.now();
      
      if (now.difference(lastSession) > _cacheValidity) {
        print('‚è∞ [SessionService] Session expir√©e (${now.difference(lastSession).inDays} jours)');
        await clearCache();
        return false;
      }
      
      // V√©rifier si Supabase a d√©j√† une session
      final currentSession = _supabase.auth.currentSession;
      if (currentSession != null) {
        print('‚úÖ [SessionService] Session Supabase active trouv√©e');
        await updateCachedSession();
        return true;
      }
      
      // Si pas de session Supabase mais cache pr√©sent, le cache est invalide
      print('‚ö†Ô∏è [SessionService] Cache pr√©sent mais pas de session Supabase - nettoyage');
      await clearCache();
      return false;
    } catch (e) {
      print('‚ùå [SessionService] Erreur v√©rification cache: $e');
      return false;
    }
  }
  
  /// Restaure automatiquement la session depuis le cache
  Future<bool> autoReconnect() async {
    try {
      print('üîÑ [SessionService] Tentative d\'auto-reconnexion...');
      
      // V√©rifier d'abord si une session est d√©j√† active
      if (_supabase.auth.currentSession != null) {
        print('‚úÖ [SessionService] D√©j√† connect√©');
        await updateCachedSession();
        return true;
      }
      
      // V√©rifier le cache - cela nettoiera automatiquement si invalide
      final hasCache = await hasValidCachedSession();
      if (!hasCache) {
        print('‚ùå [SessionService] Pas de session valide en cache');
        return false;
      }
      
      // Si on arrive ici, c'est qu'il y a une incoh√©rence
      // Le cache dit qu'il y a une session mais Supabase n'en a pas
      // On nettoie le cache pour √©viter les probl√®mes
      print('‚ö†Ô∏è [SessionService] Incoh√©rence d√©tect√©e - nettoyage du cache');
      await clearCache();
      return false;
    } catch (e) {
      print('‚ùå [SessionService] Erreur auto-reconnexion: $e');
      return false;
    }
  }
  
  /// Met √† jour les informations de session en cache
  Future<void> updateCachedSession() async {
    try {
      final user = _supabase.auth.currentUser;
      if (user == null) return;
      
      await _prefs.setString(_keyUserId, user.id);
      await _prefs.setString(_keyUserEmail, user.email ?? '');
      await _prefs.setString(_keyLastSessionTime, DateTime.now().toIso8601String());
      
      // D√©terminer le type d'utilisateur en v√©rifiant dans la table sellers
      String userType = 'particulier'; // Par d√©faut
      
      try {
        print('üîç [SessionService] V√©rification vendeur pour user ID: ${user.id}');
        print('üîç [SessionService] M√©tadonn√©es utilisateur: ${user.userMetadata}');
        
        // V√©rifier directement dans la table sellers si l'utilisateur est un vendeur
        final response = await _supabase
            .from('sellers')
            .select('id')
            .eq('id', user.id)
            .maybeSingle();
        
        print('üîç [SessionService] R√©ponse de la table sellers: $response');
        
        if (response != null) {
          userType = 'vendeur';
          print('üè™ [SessionService] Vendeur trouv√© avec ID: ${response['id']}');
        } else {
          print('‚ùå [SessionService] Utilisateur non trouv√© dans table sellers');
          // V√©rifier aussi les m√©tadonn√©es au cas o√π
          final metadata = user.userMetadata;
          print('üîç [SessionService] V√©rification m√©tadonn√©es: $metadata');
          if (metadata != null && (metadata['role'] == 'vendeur' || metadata['is_seller'] == true)) {
            userType = 'vendeur';
            print('‚úÖ [SessionService] Vendeur d√©tect√© via m√©tadonn√©es');
          }
        }
      } catch (e) {
        print('‚ö†Ô∏è [SessionService] Erreur v√©rification vendeur: $e');
        // En cas d'erreur, se baser sur les m√©tadonn√©es
        final metadata = user.userMetadata;
        if (metadata != null && (metadata['role'] == 'vendeur' || metadata['is_seller'] == true)) {
          userType = 'vendeur';
        }
      }
      
      await _prefs.setString(_keyUserType, userType);
      await _prefs.setString(_keyUserRole, userType);
      
      print('üíæ [SessionService] Session mise en cache - Type: $userType');
    } catch (e) {
      print('‚ùå [SessionService] Erreur mise √† jour cache: $e');
    }
  }
  
  /// R√©cup√®re le type d'utilisateur en cache
  String? getCachedUserType() {
    return _prefs.getString(_keyUserType);
  }
  
  /// R√©cup√®re l'ID utilisateur en cache
  String? getCachedUserId() {
    return _prefs.getString(_keyUserId);
  }
  
  /// R√©cup√®re l'email utilisateur en cache
  String? getCachedUserEmail() {
    return _prefs.getString(_keyUserEmail);
  }
  
  /// R√©cup√®re le r√¥le utilisateur en cache
  String? getCachedUserRole() {
    return _prefs.getString(_keyUserRole);
  }
  
  /// Active ou d√©sactive l'auto-reconnexion
  Future<void> setAutoReconnect(bool enabled) async {
    await _prefs.setBool(_keyAutoReconnect, enabled);
    print('‚öôÔ∏è [SessionService] Auto-reconnexion: ${enabled ? 'activ√©e' : 'd√©sactiv√©e'}');
  }
  
  /// V√©rifie si l'auto-reconnexion est activ√©e
  bool isAutoReconnectEnabled() {
    return _prefs.getBool(_keyAutoReconnect) ?? true;
  }
  
  /// Nettoie le cache de session
  Future<void> clearCache() async {
    await _prefs.remove(_keyUserId);
    await _prefs.remove(_keyUserEmail);
    await _prefs.remove(_keyUserRole);
    await _prefs.remove(_keyUserType);
    await _prefs.remove(_keyLastSessionTime);
    print('üßπ [SessionService] Cache de session nettoy√©');
  }
  
  /// D√©connecte l'utilisateur et nettoie le cache
  Future<void> logout() async {
    try {
      await _supabase.auth.signOut();
      await clearCache();
      print('üëã [SessionService] D√©connexion r√©ussie');
    } catch (e) {
      print('‚ùå [SessionService] Erreur d√©connexion: $e');
      // Nettoyer le cache m√™me en cas d'erreur
      await clearCache();
    }
  }
}

