#!/bin/bash

# Script de pr√©-build pour Xcode Cloud
# Ex√©cut√© avant chaque build Xcode Cloud pour pr√©parer Flutter et CocoaPods

set -e  # Arr√™ter en cas d'erreur

echo "üöÄ [Xcode Cloud] Script de pr√©-build Flutter/CocoaPods d√©marr√©"
echo "üìÇ R√©pertoire de travail : $(pwd)"
echo "üîß Variables d'environnement:"
echo "   - HOME: $HOME"
echo "   - CI_WORKSPACE: $CI_WORKSPACE"
echo "   - PATH: $PATH"
echo "   - PUB_CACHE: $PUB_CACHE (local)"

# Variables avec chemins Xcode Cloud
FLUTTER_ROOT="$HOME/flutter"
PUB_CACHE="$HOME/.pub-cache"

# Cr√©er les r√©pertoires n√©cessaires
mkdir -p "$PUB_CACHE"
export PUB_CACHE="$PUB_CACHE"

# 1. Installation de Flutter si n√©cessaire
echo "üì± [1/6] V√©rification/Installation de Flutter..."
if [ ! -d "$FLUTTER_ROOT" ]; then
    echo "‚¨áÔ∏è  T√©l√©chargement de Flutter (stable)..."
    cd $HOME
    /usr/bin/git clone https://github.com/flutter/flutter.git -b stable --depth 1
    export PATH="$FLUTTER_ROOT/bin:$PATH"
    $FLUTTER_ROOT/bin/flutter --version
else
    echo "‚úÖ Flutter d√©j√† install√©"
    export PATH="$FLUTTER_ROOT/bin:$PATH"
    $FLUTTER_ROOT/bin/flutter --version
fi

# 2. Retour au r√©pertoire du projet
echo "üìÇ [2/6] Navigation vers le r√©pertoire du projet..."
if [ -z "$CI_WORKSPACE" ]; then
    # Fallback si CI_WORKSPACE est vide
    PROJECT_ROOT="/Volumes/workspace/repository"
    echo "‚ö†Ô∏è  CI_WORKSPACE vide, utilisation du fallback: $PROJECT_ROOT"
else
    PROJECT_ROOT="$CI_WORKSPACE"
fi

cd "$PROJECT_ROOT"
echo "‚úÖ R√©pertoire de travail : $(pwd)"

# 3. Mise √† jour du num√©ro de build avec CI_BUILD_NUMBER d'Xcode Cloud
echo "üî¢ [3/8] Mise √† jour du num√©ro de build..."
if [ ! -z "$CI_BUILD_NUMBER" ]; then
    echo "   Utilisation du build number Xcode Cloud: $CI_BUILD_NUMBER"
    # Lire la version actuelle
    CURRENT_VERSION=$(grep 'version:' pubspec.yaml | sed 's/version: //' | sed 's/+.*//')
    # Mettre √† jour avec le nouveau build number
    sed -i.bak "s/version: .*/version: $CURRENT_VERSION+$CI_BUILD_NUMBER/" pubspec.yaml
    echo "   Version mise √† jour: $CURRENT_VERSION+$CI_BUILD_NUMBER"
else
    echo "   ‚ö†Ô∏è  CI_BUILD_NUMBER non d√©fini, utilisation de la version existante"
fi

# 4. Installation des d√©pendances Flutter
echo "üì¶ [4/8] Installation des d√©pendances Flutter..."
$FLUTTER_ROOT/bin/flutter pub get

# 5. G√©n√©ration du code
echo "üîß [5/8] G√©n√©ration du code (build_runner)..."
$FLUTTER_ROOT/bin/dart run build_runner build --delete-conflicting-outputs || {
    echo "‚ö†Ô∏è  G√©n√©ration de code √©chou√©e, continuation sans erreur..."
}

# 6. Pr√©paration iOS et installation des CocoaPods
echo "üçé [6/8] Pr√©paration des artefacts iOS..."
$FLUTTER_ROOT/bin/flutter precache --ios

echo "üì¶ [7/8] Installation des d√©pendances CocoaPods..."
cd ios
# Mettre √† jour les specs CocoaPods
/usr/local/bin/pod repo update --silent || true
# Installer les pods
/usr/local/bin/pod install --repo-update

# 8. V√©rification finale
echo "‚úÖ [8/8] V√©rification des fichiers g√©n√©r√©s..."
cd "$PROJECT_ROOT"

# V√©rifier que les fichiers critiques existent
if [ -f "ios/Flutter/Generated.xcconfig" ]; then
    echo "‚úÖ Generated.xcconfig trouv√©"
else
    echo "‚ùå Generated.xcconfig manquant - Tentative de r√©g√©n√©ration..."
    $FLUTTER_ROOT/bin/flutter build ios --debug --no-codesign
fi

if [ -f "ios/Podfile.lock" ]; then
    echo "‚úÖ Podfile.lock trouv√©"
else
    echo "‚ùå Podfile.lock manquant - Probl√®me avec CocoaPods"
    exit 1
fi

echo "üéâ [Xcode Cloud] Pr√©-build termin√© avec succ√®s !"
echo "üìä R√©sum√© :"
echo "   - Flutter: $($FLUTTER_ROOT/bin/flutter --version | head -n1)"
echo "   - CocoaPods: $(/usr/local/bin/pod --version)"
echo "   - Project Root: $PROJECT_ROOT"